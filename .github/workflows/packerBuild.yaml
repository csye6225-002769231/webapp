name: Packer Build after Merge

on:
  pull_request:
    branches:
    - main

jobs:
  Run-Packer-Build-Check:
    # if: github.repository == 'csye6225-002769231/webapp' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Waiting for integration test
      #   uses: lewagon/wait-on-check-action@v1.3.1
      #   with: 
      #     ref: ${{ github.ref }}
      #     check-name: 'Run-Integration-test-for-healthz'
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     wait-interval: 10
      #     allowed-conclusions: success

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'

      - name: Create user.csv
        run: |
          touch user.csv
          echo "${{secrets.USER_CSV}}" >> user.csv

      - name: Artifact Setup
        run: zip -r webapp.zip .

      - name: AWS Configure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.SECRET_ACCESS_KEY}}
          aws-region: us-east-1

      - name: Initialization
        run: |
          packer init aws.pkr.hcl

      - name: Build AMI and Extract AMI ID
        id: build-ami
        run: |
            PACKER_OUTPUT=$(packer build aws.pkr.hcl)
            AMI_ID=$(echo "$PACKER_OUTPUT" | grep -oP 'AMI: \K(ami-[a-zA-Z0-9]+)')
            echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
            echo "::set-output name=ami_id::$AMI_ID"       
        env:
          AMI_USER_DEMO: ${{ secrets.AMI_USER_DEMO }}
          PKR_VAR_aws-region: ${{ secrets.AWS_REGION }}
          PKR_VAR_source-ami: ${{ secrets.SOURCE_AMI }}
          PKR_VAR_subnet-id: ${{ secrets.SUBNET_ID }}

      - name: AWS Configure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.DEMO_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.DEMO_SECRET_ACCESS_KEY}}
          aws-region: us-east-1

      - name: Create Launch Template Version
        run: |
          LAUNCH_TEMPLATE_NAME="webapp-lc"
          # Retrieve the latest launch template version number
          LATEST=$(aws ec2 describe-launch-template-versions --launch-template-name "$LAUNCH_TEMPLATE_NAME" --query 'LaunchTemplateVersions[-1].VersionNumber' --output text)
          echo "Latest version: $LATEST"
          # Create a new launch template version
          LAUNCH_TEMPLATE_VERSION=$(aws ec2 create-launch-template-version --launch-template-name "$LAUNCH_TEMPLATE_NAME" --source-version "$LATEST" --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}" --query 'LaunchTemplateVersion.VersionNumber' --output text)
          if [ -z "$LAUNCH_TEMPLATE_VERSION" ] || [ "$LAUNCH_TEMPLATE_VERSION" == "0" ]; then
            echo "Failed to create launch template version"
            exit 1
          fi
          echo "Launch template version: $LAUNCH_TEMPLATE_VERSION"
          echo "LAUNCH_TEMPLATE_VERSION=$LAUNCH_TEMPLATE_VERSION" >> $GITHUB_ENV

      - name: Update Auto Scaling Group
        run: |
          # Update the Auto Scaling group to use the new launch template version
          echo "Updating ASG with launch template version: $LAUNCH_TEMPLATE_VERSION"
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name asg --launch-template "LaunchTemplateName=webapp-lc,Version=$LAUNCH_TEMPLATE_VERSION"

      - name: Trigger Instance Refresh
        run: |
          # Start an instance refresh for the Auto Scaling group
          echo "Starting instance refresh for ASG"
          aws autoscaling start-instance-refresh --auto-scaling-group-name asg --strategy Rolling





      